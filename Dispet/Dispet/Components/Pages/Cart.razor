@page "/cart"
@using System.Text.Json
@inject IJSRuntime JS

<div class="container mt-5">
    <h2 class="mb-4">Carrito de Compras</h2>

    @if (cartItems.Count == 0)
    {
        <p class="text-muted">Tu carrito está vacío.</p>
    }
    else
    {
        <ul class="list-group mb-4">
            @foreach (var item in cartItems)
            {
                <li class="list-group-item d-flex justify-content-between align-items-center">
                    <div>
                        <h5>@item.Name</h5>
                        <small>Cantidad: @item.Quantity</small>
                    </div>
                    <span>$@String.Format("{0:0.00}", item.Price * item.Quantity)</span>
                </li>
            }
        </ul>

        <div class="text-end">
            <p class="fw-bold">Total: $@String.Format("{0:0.00}", total)</p>
            <button class="btn btn-danger mt-3" @onclick="ClearCart">Vaciar Carrito</button>
            <button class="btn btn-success mt-3 ms-2">Proceder al Pago</button>

        </div>
    }
</div>

@code {
    private List<CartItem> cartItems = new();
    private decimal total;

    protected override async Task OnInitializedAsync()
    {
        // Cargar los datos del carrito invocando la función de JavaScript getCart
        var json = await JS.InvokeAsync<string>("getCart");
        if (!string.IsNullOrEmpty(json))
        {
            cartItems = JsonSerializer.Deserialize<List<CartItem>>(json) ?? new List<CartItem>();
            CalculateTotal();
        }
    }

    private void CalculateTotal()
    {
        total = cartItems.Sum(item => item.Price * item.Quantity);
    }

    private async Task ClearCart()
    {
        // Llamar a la función de JavaScript para limpiar el carrito
        await JS.InvokeVoidAsync("clearCart");
        cartItems.Clear();
        total = 0;
    }

    public class CartItem
    {
        public int Id { get; set; }
        public string Name { get; set; } = string.Empty;
        public decimal Price { get; set; }
        public int Quantity { get; set; }
    }
}
